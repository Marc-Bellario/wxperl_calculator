#!/usr/bin/perl -w -- 
# generated by wxGlade 0.6.5 (standalone edition) on Sat Jan 12 21:35:01 2013
# To get wxPerl visit http://wxPerl.sourceforge.net/

#use Wx 0.15 qw[:allclasses];
use strict;
use hoprpn qw(evaluate);
use v5.10;
package MyFrame;
use Wx qw[:button :textctrl :statictext :menu :sizer :misc :frame];
#use Wx qw[:everything];
#use Wx qw[ TAGLIST];
#use Wx qw[Button TextCtrl StaticText MenuBar Menu BoxSizer GridSizer];
#use Wx::Button;
#use Wx::TextCtrl;
#use Wx::StaticText;
#use Wx::MenuBar;
#use Wx::Menu;
#use Wx::BoxSizer;
#use Wx::GridSizer;






use base qw(Wx::Frame);
#use base( button textctrl statictext menubar menu boxsizer gridsizer);
use strict;
use Wx::Event qw(EVT_MENU EVT_CLOSE);

sub new {
	my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
	$parent = undef              unless defined $parent;
	$id     = -1                 unless defined $id;
	$title  = ""                 unless defined $title;
	$pos    = wxDefaultPosition  unless defined $pos;
	$size   = wxDefaultSize      unless defined $size;
	$name   = ""                 unless defined $name;

# begin wxGlade: MyFrame::new

	$style = wxDEFAULT_FRAME_STYLE 
		unless defined $style;

	$self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
	$self->{text_ctrl_2} = Wx::TextCtrl->new($self, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{label_1} = Wx::StaticText->new($self, -1, "<=TTL     |     OP=>", wxDefaultPosition, wxDefaultSize, );
	$self->{text_ctrl_1} = Wx::TextCtrl->new($self, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{button_1} = Wx::Button->new($self, -1, "1");
	$self->{button_2} = Wx::Button->new($self, -1, "2");
	$self->{button_3} = Wx::Button->new($self, -1, "3");
	$self->{button_4} = Wx::Button->new($self, -1, "4");
	$self->{button_5} = Wx::Button->new($self, -1, "5");
	$self->{button_6} = Wx::Button->new($self, -1, "6");
	$self->{button_7} = Wx::Button->new($self, -1, "7");
	$self->{button_8} = Wx::Button->new($self, -1, "8");
	$self->{button_9} = Wx::Button->new($self, -1, "9");
	$self->{button_10} = Wx::Button->new($self, -1, "0");
	$self->{button_11} = Wx::Button->new($self, -1, "+");
	$self->{button_12} = Wx::Button->new($self, -1, "-");
	$self->{button_13} = Wx::Button->new($self, -1, "Enter");
	$self->{button_14} = Wx::Button->new($self, -1, "*");
	$self->{button_15} = Wx::Button->new($self, -1, "/");

        $self->{text_ctrl_2}->SetValue("0");
	
	Wx::Event::EVT_BUTTON(
		$self, $self->{button_1},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_1}->GetValue;
			$text .= "1";
			$self->{text_ctrl_1}->SetValue($text);
		}
	);

	Wx::Event::EVT_BUTTON(
		$self, $self->{button_2},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_1}->GetValue;
			$text .= "2";
			$self->{text_ctrl_1}->SetValue($text);
		}
	);

	Wx::Event::EVT_BUTTON(
		$self, $self->{button_3},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_1}->GetValue;
			$text .= "3";
			$self->{text_ctrl_1}->SetValue($text);
		}
	);

	Wx::Event::EVT_BUTTON(
		$self, $self->{button_4},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_1}->GetValue;
			$text .= "4";
			$self->{text_ctrl_1}->SetValue($text);
		}
	);

	Wx::Event::EVT_BUTTON(
		$self, $self->{button_5},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_1}->GetValue;
			$text .= "5";
			$self->{text_ctrl_1}->SetValue($text);
		}
	);

	Wx::Event::EVT_BUTTON(
		$self, $self->{button_6},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_1}->GetValue;
			$text .= "6";
			$self->{text_ctrl_1}->SetValue($text);
		}
	);

	Wx::Event::EVT_BUTTON(
		$self, $self->{button_7},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_1}->GetValue;
			$text .= "7";
			$self->{text_ctrl_1}->SetValue($text);
		}
	);

	Wx::Event::EVT_BUTTON(
		$self, $self->{button_8},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_1}->GetValue;
			$text .= "8";
			$self->{text_ctrl_1}->SetValue($text);
		}
	);

	Wx::Event::EVT_BUTTON(
		$self, $self->{button_9},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_1}->GetValue;
			$text .= "9";
			$self->{text_ctrl_1}->SetValue($text);
		}
	);
	
	Wx::Event::EVT_BUTTON(
		$self, $self->{button_10},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_1}->GetValue;
			$text .= "0";
			$self->{text_ctrl_1}->SetValue($text);
		}
	);
	
	Wx::Event::EVT_BUTTON(
		$self, $self->{button_11},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_2}->GetValue;
			$text += $self->{text_ctrl_1}->GetValue;;
			$self->{text_ctrl_2}->SetValue($text);
		}
	);
	
	Wx::Event::EVT_BUTTON(
		$self, $self->{button_12},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_2}->GetValue;
			$text -= $self->{text_ctrl_1}->GetValue;;
			$self->{text_ctrl_2}->SetValue($text);
		}
	);
	
	Wx::Event::EVT_BUTTON(
		$self, $self->{button_13},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
#			my $text = $self->{text_ctrl_2}->GetValue;
#                        hoprpn::new();
			my $text = hoprpn::evaluate($self->{text_ctrl_1}->GetValue);
			if (defined ($text))
			{
			$self->{text_ctrl_2}->SetValue($text);
		        }
		        else
		        {
		        	$self->{text_ctrl_2}->SetValue('undef');
		        }
		}
	);

	Wx::Event::EVT_BUTTON(
		$self, $self->{button_14},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text = $self->{text_ctrl_2}->GetValue;
			$text = $text * $self->{text_ctrl_1}->GetValue;
			$self->{text_ctrl_2}->SetValue($text);
		}
	);
	
	Wx::Event::EVT_BUTTON(
		$self, $self->{button_15},
		sub {
			my ( $self, $event ) = @_;
			print "printing to STDOUT\n";
			# print STDERR "printing to STDERR\n";
			my $text_divd = $self->{text_ctrl_2}->GetValue;
			my $text_div = $self->{text_ctrl_1}->GetValue;
			my $len_div = 0;
			my $len_divd = 0;


			if ((defined( $text_div)) && (defined( $text_divd)))
			{
				                        if ( ($text_div =~ /^\d+$/) && ($text_divd =~ /^\d+$/) )
                                                        { # Itâ€™s a number
		                                           $len_div = length ($text_div);
			                                   $len_divd = length ($text_divd);
			                                  } 
		         }
#                        hoprpn::new();
                        my $text;
                         if (  ($len_div == 0) || ($len_divd == 0))
                         { 
			           $text = 'undef';
			  }         
			  elsif ($text_div == 0)
			  {
			  	$text = 'undef';
			  }
			  else
			  {
			  	   $text = $text_divd / $text_div;
			  }
			$self->{text_ctrl_2}->SetValue($text);
		}
	);


	# Menu Bar

	$self->{frame_1_menubar} = Wx::MenuBar->new();
#	my $wxglade_tmp_menu;
	
	 my $file_menu = Wx::Menu->new();    
    $file_menu->Append(11, 'E&xit');
	my $upt_menu = Wx::Menu->new();
	my $upt2_menu = Wx::Menu->new();
	
    $upt_menu->Append(12, 'ClearTTL');
    $upt2_menu->Append(13, 'ClearOP');
	
	

	$self->{frame_1_menubar}->Append($file_menu, "&File");
	$self->{frame_1_menubar}->Append($upt_menu,"&clear1");
	$self->{frame_1_menubar}->Append($upt2_menu, "&clear2");
	
	$self->SetMenuBar($self->{frame_1_menubar});

EVT_MENU( $self,11, \&OnQuit );	
EVT_MENU( $self,12, \&OnUpdate );	
EVT_MENU( $self,13, \&OnUpdate2 );	
	
	
# Menu Bar end


	$self->__set_properties();
	$self->__do_layout();

# end wxGlade
	return $self;

}


sub __set_properties {
	my $self = shift;

# begin wxGlade: MyFrame::__set_properties

	$self->SetTitle("simple calculator");

# end wxGlade
}

sub __do_layout {
	my $self = shift;

# begin wxGlade: MyFrame::__do_layout

	$self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{grid_sizer_1} = Wx::GridSizer->new(6, 3, 0, 0);
	$self->{grid_sizer_1}->Add($self->{text_ctrl_2}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{label_1}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{text_ctrl_1}, 0, wxEXPAND|wxALIGN_CENTER_HORIZONTAL, 0);
	$self->{grid_sizer_1}->Add($self->{button_1}, 0, wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
	$self->{grid_sizer_1}->Add($self->{button_2}, 0, wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
	$self->{grid_sizer_1}->Add($self->{button_3}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_4}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_5}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_6}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_7}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_8}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_9}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_10}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_11}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_12}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_13}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_14}, 0, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{button_15}, 0, wxEXPAND, 0);

	$self->{sizer_1}->Add($self->{grid_sizer_1}, 1, wxEXPAND, 0);
	$self->SetSizer($self->{sizer_1});
	$self->{sizer_1}->Fit($self);
	$self->Layout();

# end wxGlade
}

sub OnClose {
    my($this, $event) = @_;

    $this->Destroy();
}
	
sub OnQuit {
    my $this = shift;
    $this->Close( 1 );
}

sub OnUpdate {
    my $this = shift;
    use Wx qw(wxOK wxCENTRE);
    my $clear = "0";
    $this->{text_ctrl_2}->SetValue($clear);
}


sub OnUpdate2 {
    my $this = shift;
    use Wx qw(wxOK wxCENTRE);
    my $clear = "";
    $this->{text_ctrl_1}->SetValue($clear);
}




# end of class MyFrame

1;

1;

package main;

# unless(caller){
	local *Wx::App::OnInit = sub{1};
	my $app = Wx::App->new();
	Wx::InitAllImageHandlers();

	my $frame_1 = MyFrame->new();

	$app->SetTopWindow($frame_1);
	$frame_1->Show(1);
	$app->MainLoop();
# }
